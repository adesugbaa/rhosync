== Bulk Sync ==
Sometimes, especially during initialization of application on the device, you may need to synchronize a substantial number of objects. This may result in many megabytes of data sent to the device. In such case, incremental  synchronization may take a while to complete. To speed up this process you may use RhoSync's "bulk sync" feature. 

If and when the Rhodes application issues request to the rhosync server to get bulk data, the RhoSync application will do following:
* execute 'query' method of all source adapters to get latest set of objects from the backend server
* generate appropriate db files for the device - hsql for Blacberry and sqlite for the rest of them. RhoSync will use sqlite3-ruby gem to generate sqlite db files and vendor/hsqldata.jar to generate db files for Blackberry (please make sure you have java installed and configured to execute hsqldata.jar)  
* Rhodes application will be polling for availability of db files while they are generated; once these files are generated, Rhodes will load them and install them on the device. Please be cautious - any previous set of objects on the device will be replaced with the latest set from the backend. 

Once bulk data sync process completed for a given source, you may continue to synchronize this data source using regular incremental sync process. However, regular sync process may be disabled for a given source by setting sync_type to :bulk_sync_only.

=== Enabling Bulk Sync ===
In the device rhodes application, setting bulksync_state to 0 in rhoconfig.txt will trigger bulk sync next time sync is performed:

<pre>
bulksync_state = 0
</pre>

After application executed bulk sync it will set bulksync_state to 1 and next time sync will happen, it will not execute bulk sync anymore. You may force bulk sync on the next sync cycle by setting bulksync_state to 0 again using ruby in your application:
<source lang='ruby'>
Rho::RhoConfig.bulksync_state = '0'
</source>

==== Enabling BlackBerry Bulk Sync ====
If your application will be performing bulk sync for BlackBerry devices, you will need to install the open source Rhomobile HSQLDB tool [http://github.com/rhomobile/hsqldata hsqldata.jar] in your RhoSync application.
  Download and extract [http://github.com/rhomobile/hsqldata/zipball/0.0.2 hsqldata].
  cd hsqldata
  ant
  mkdir <path-to-rhosync-app>/vendor
  cp bin/hsqldata.jar <path-to-rhosync-app>/vendor/

Next set the :blackberry_bulk_sync: flag in settings/settings.yml:

<pre>
:development:
  :licensefile: settings/license.key
  :redis: localhost:6379
  :syncserver: http://localhost:9292/application/
  :blackberry_bulk_sync: true
</pre>

=== Bulk Sync Data Files ===
By default, bulk sync data files will be stored in the application's root folder, under a 'data' directory.  When bulk data is requested by the Rhodes application, RhoSync will return a link to the file if the bulk_sync_poll_interval has not expired.  If the file is expired, RhoSync will return a wait command to Rhodes and enqueue a [http://github.com/defunkt/resque resque job] to generate new bulk data files.  By default, the bulk_sync_poll_interval is set to 1 hour (3600) seconds and is configurable in settings.yml:

<pre>
:development: 
  :redis: localhost:6379
  :licensefile: settings/license.key
  :syncserver: http://localhost:9292/application/
  :bulk_sync_poll_interval: 3600
</pre>

== Fixed Schema (with bulk) ==
If your Rhom model is a [[Rhom#Fixed_Schema_Model|fixed schema model]] and you use bulk sync, you can control the bulk sync schema at runtime in your source adapter by implementing the 'schema' method.  An example schema method is as follows:

<source lang='ruby'>
  def schema
    {
      'version' => '1.0',
      'property' => {
        'name' => 'string',
        'brand' => 'string',
        'price' => 'string',
        'image_url_cropped' => 'blob,overwrite',
        'image_url' => 'blob'
      },
      'index' => {
        'by_name_brand' => 'name,brand'
      },
      'unique_index' => {
        'by_price' => 'price'
      }
    }.to_json
  end
</source>

Note that this method must return JSON.